// generated by cdk8s
import { ApiObject } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * A VPC is a managed resource that represents an AWS Virtual Private Cloud.
 *
 * @schema VPC
 */
export class Vpc extends ApiObject {
  /**
   * Defines a "VPC" API object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: VpcOptions) {
    super(scope, name, {
      ...options,
      kind: 'VPC',
      apiVersion: 'ec2.aws.crossplane.io/v1beta1',
    });
  }
}

/**
 * A VPC is a managed resource that represents an AWS Virtual Private Cloud.
 *
 * @schema VPC
 */
export interface VpcOptions {
  /**
   * @schema VPC#metadata
   */
  readonly metadata?: any;

  /**
   * A VPCSpec defines the desired state of a VPC.
   *
   * @schema VPC#spec
   */
  readonly spec: VpcSpec;

}

/**
 * A VPCSpec defines the desired state of a VPC.
 *
 * @schema VpcSpec
 */
export interface VpcSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema VpcSpec#deletionPolicy
   */
  readonly deletionPolicy?: VpcSpecDeletionPolicy;

  /**
   * VPCParameters define the desired state of an AWS Virtual Private Cloud.
   *
   * @schema VpcSpec#forProvider
   */
  readonly forProvider: VpcSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema VpcSpec#providerConfigRef
   */
  readonly providerConfigRef?: VpcSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema VpcSpec#providerRef
   */
  readonly providerRef?: VpcSpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema VpcSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: VpcSpecWriteConnectionSecretToRef;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema VpcSpecDeletionPolicy
 */
export enum VpcSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * VPCParameters define the desired state of an AWS Virtual Private Cloud.
 *
 * @schema VpcSpecForProvider
 */
export interface VpcSpecForProvider {
  /**
   * CIDRBlock is the IPv4 network range for the VPC, in CIDR notation. For example, 10.0.0.0/16.
   *
   * @schema VpcSpecForProvider#cidrBlock
   */
  readonly cidrBlock: string;

  /**
   * Indicates whether the instances launched in the VPC get DNS hostnames.
   *
   * @schema VpcSpecForProvider#enableDnsHostNames
   */
  readonly enableDnsHostNames?: boolean;

  /**
   * A boolean flag to enable/disable DNS support in the VPC
   *
   * @schema VpcSpecForProvider#enableDnsSupport
   */
  readonly enableDnsSupport?: boolean;

  /**
   * The allowed tenancy of instances launched into the VPC.
   *
   * @schema VpcSpecForProvider#instanceTenancy
   */
  readonly instanceTenancy?: string;

  /**
   * Region is the region you'd like your VPC to be created in.
   *
   * @schema VpcSpecForProvider#region
   */
  readonly region?: string;

  /**
   * Tags are used as identification helpers between AWS resources.
   *
   * @schema VpcSpecForProvider#tags
   */
  readonly tags?: VpcSpecForProviderTags[];

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema VpcSpecProviderConfigRef
 */
export interface VpcSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema VpcSpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema VpcSpecProviderRef
 */
export interface VpcSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema VpcSpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema VpcSpecWriteConnectionSecretToRef
 */
export interface VpcSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema VpcSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema VpcSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Tag defines a tag
 *
 * @schema VpcSpecForProviderTags
 */
export interface VpcSpecForProviderTags {
  /**
   * Key is the name of the tag.
   *
   * @schema VpcSpecForProviderTags#key
   */
  readonly key: string;

  /**
   * Value is the value of the tag.
   *
   * @schema VpcSpecForProviderTags#value
   */
  readonly value: string;

}

